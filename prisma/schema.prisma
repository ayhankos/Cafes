generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id           String     @id @default(cuid())
    name         String?
    email        String     @unique
    password     String?
    provider     String?
    profileImage String?
    role         UserRole   @default(USER)
    comments     Comment[]
    ratings      Rating[]
    favorites    Favorite[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    accounts     Account[]
    sessions     Session[]
}

model Favorite {
    id        String   @id @default(cuid())
    userId    String
    cafeId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, cafeId])
}

model Cafe {
    id                 String        @id @default(cuid())
    name               String
    city               String
    district           String
    category           String
    description        String?       @db.Text
    googleMapsUrl      String?
    googleMapsEmbedUrl String?       @db.Text
    images             Image[]
    comments           Comment[]
    ratings            Rating[]
    favorites          Favorite[]
    contactInfos       ContactInfo[]
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
}

model ContactInfo {
    id        String      @id @default(cuid())
    type      ContactType
    value     String
    cafe      Cafe        @relation(fields: [cafeId], references: [id], onDelete: Cascade)
    cafeId    String
    createdAt DateTime    @default(now())
}

enum ContactType {
    WEBSITE
    INSTAGRAM
    FACEBOOK
    TWITTER
    PHONE
    EMAIL
}

model Image {
    id        String   @id @default(cuid())
    url       String
    cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
    cafeId    String
    createdAt DateTime @default(now())
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    Cafe      Cafe?    @relation(fields: [cafeId], references: [id])
    cafeId    String?
}

model Rating {
    id        String   @id @default(cuid())
    rating    Float    @default(0)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    Cafe      Cafe?    @relation(fields: [cafeId], references: [id])
    cafeId    String?
}

enum UserRole {
    USER
    ADMIN
}

model Contacts {
    id        String   @id @default(cuid())
    name      String
    email     String
    phone     String
    subject   String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
