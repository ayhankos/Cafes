generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id           String     @id @default(cuid())
    name         String?
    email        String     @unique
    password     String?
    provider     String?
    profileImage String?
    role         UserRole   @default(USER)
    comments     Comment[]
    ratings      Rating[]
    favorites    Favorite[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    accounts     Account[]
    sessions     Session[]
}

model Favorite {
    id        String   @id @default(cuid())
    userId    String
    cafeId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    cafe      Cafe     @relation(fields: [cafeId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, cafeId])
}

model Cafe {
    id            String     @id @default(cuid())
    name          String
    city          String
    district      String
    description   String?
    googleMapsUrl String?
    comments      Comment[]
    ratings       Rating[]
    favorites     Favorite[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    Cafe      Cafe?    @relation(fields: [cafeId], references: [id])
    cafeId    String?
}

model Rating {
    id        String   @id @default(cuid())
    score     Int      @default(0) // 1-5
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    Cafe      Cafe?    @relation(fields: [cafeId], references: [id])
    cafeId    String?
}

enum UserRole {
    USER
    ADMIN
}
